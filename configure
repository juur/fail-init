#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

show_help() 
{
	cat <<EOF
	Usage: configure [options]
Configuration:
  --help                    print this message
  --version                 show version information
  --quiet                   supress output
  --target=TARGET           cross-compile target

Program names:
  --program-prefix=[PREFIX]

Directory and file names:
  --bindir=DIR
  --datadir=DIR
  --datarootdir=DIR
  --docdir=DIR
  --exec-prefix=DIR
  --includedir=DIR
  --infodir=DIR
  --libdir=DIR
  --libexecdir=DIR
  --localedir=DIR
  --localstatedir=DIR
  --mandir=DIR
  --prefix=DIR
  --sbindir=DIR
  --sharedstatedir=DIR
  --sysconfdir=DIR

Optional features:
  --disable-dependency-tracking
EOF
}

show_version()
{
	cat <<EOF
configure script for $(cat misc/PACKAGE) version $(cat misc/VERSION)
EOF
}

QUIET=0
DEPS=1
SAVED_ARGS="$*"

while :; do
	case ${1:-} in
		-h|--help) show_help; exit ;;
		--quiet) QUIET=1 ;;
		--version|-v) show_version; exit ;;
		--target=?*) TARGET=${1#*=} ;;
# Paths
		--bindir=?*) BINDIR=${1#*=} ;;
		--datadir=?*) DATADIR=${1#*=} ;;
		--datarootdir=?*) DATAROOTDIR=${1#*=} ;;
		--docdir=?*) DOCDIR=${1#*=} ;;
		--exec-prefix=?*) EXECPREFIX=${1#*=} ;;
		--includedir=?*) INCLUDEDIR=${1#*=} ;;
		--infodir=?*) INFODIR=${1#*=} ;;
		--libdir=?*) LIBDIR=${1#*=} ;;
		--libexecdir=?*) LIBEXECDIR=${1#*=} ;;
		--localedir=?*) LOCALEDIR=${1#*=} ;;
		--localstatedir=?*) LOCALSTATEDIR=${1#*=} ;;
		--mandir=?*) MANDIR=${1#*=} ;;
		--prefix=?*) PREFIX=${1#*=} ;;
		--sbindir=?*) SBINDIR=${1#*=} ;;
		--sharedstatedir=?*) SHAREDSTATEDIR=${1#*=} ;;
		--sysconfdir=?*) SYSCONFDIR=${1#*=} ;;
# These are added to keep RPM %configure error free		
		--build=?*) BUILD=${1#*=} ;;
		--host=?*) HOST=${1#*=} ;;
		--program-prefix=?*) PROGPREFIX=${1#*=} ;;
		--program-prefix=) PROGPREFIX= ;;
		--disable-dependency-tracking) DEPS=0 ;;
		--enable-dependency-tracking) DEPS=1 ;;
		*) [[ -n "${1-}" ]] && { echo "Unknown argument ${1-}" >&2; exit 1; } ;;
	esac
	shift || break
done

# log all of the scripts output to config.log
if [[ ${QUIET} == 0 ]]; then
	exec &> >(tee config.log)
else
	exec &>config.log
fi

OBJDIR=$(pwd)
SRCDIR=$(dirname ${0})

if [[ "$(realpath ${OBJDIR})" = "$(realpath ${SRCDIR})" ]]; then
	echo "Building inside source directory."
fi

# Default file locations, or use env provided ones

BINDIR=${BINDIR:-\$(exec_prefix)/bin}
DATADIR=${DATADIR:-\$(datarootdir)}
DATAROOTDIR=${DATAROOTDIR:-\$(prefix)/share}
DOCDIR=${DOCDIR:-\$(datarootdir)/doc}
EXECPREFIX=${EXECPREFIX:-\$(prefix)}
INCLUDEDIR=${INCLUDEDIR:-\$(prefix)/include}
INFODIR=${INFODIR:-\$(datarootdir)/info}
LIBDIR=${LIBDIR:-\$(prefix)/lib}
LIBEXECDIR=${LIBEXECDIR:-\$(exec_prefix)/libexec}
LOCALEDIR=${LOCALEDIR:-\$(datarootdir)/locale}
LOCALSTATEDIR=${LOCALSTATEDIR:-\$(prefix)/var}
MANDIR=${MANDIR:-\$(datarootdir)/man}
PREFIX=${PREFIX:-/usr/local}
SBINDIR=${SBINDIR:-\$(exec_prefix)/sbin}
SHAREDSTATEDIR=${SHAREDSTATEDIR:-\$(prefix)/var/lib}
SYSCONFDIR=${SYSCONFDIR:-\$(prefix)/etc}
TARGET=${TARGET:-}

[[ "${PREFIX}" = "/" ]] && PREFIX=""
[[ -n "${TARGET}" ]] && TOOL="${TARGET}-" || TOOL=""

# Default compiler flags

CFLAGS=${CFLAGS:--O -std=c99 -pipe -Wall -Wextra -Wno-unused-parameter \
	-Wno-unused-function -Wno-sign-compare -D_FORTIFY_SOURCE=2 \
	-fstack-protector}
CPPFLAGS=${CPPFLAGS:--D_XOPEN_SOURCE=700}
LDFLAGS=${LDFLAGS:-}
TARGET=${TARGET:-}
YFLAGS=${YFLAGS:-}
LFLAGS=${LFLAGS:-}

# Location of default tools

PKG_CONFIG=${PKG_CONFIG:-pkg-config}
CC=${CC:-${TOOL}gcc}
CXX=${CXX:-${TOOL}g++}
YACC=
#${YACC:-${TOOL}byacc}
LEX=
#${LEX:-${TOOL}flex}

# Predefined values, which should not be easily changed

[[ -f "${SRCDIR}/misc/VERSION" && -r "${SRCDIR}/misc/VERSION" ]] || fail "Cannot read misc/VERSION"
[[ -f "${SRCDIR}/misc/PACKAGE" && -r "${SRCDIR}/misc/PACKAGE" ]] || fail "Cannot read misc/PACKAGE"

PACKAGE=$(cat "${SRCDIR}/misc/PACKAGE")
VERSION=$(cat "${SRCDIR}/misc/VERSION")

# Support functions

check_pkg() 
{
	echo -n "Checking for $1 ... "
	$(${PKG_CONFIG} --exists "${1}")
	local RT=$?
	ok ${RT}
	return ${RT}
}

fail()
{
	echo "${1}"
	exit 1
}

check_header()
{
	echo -n "Checking for ${1} ... "
	$(echo "#include <${1}>" | \
		${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -E - -o /dev/null 2>>config.log)
	local RT=$?
	ok $?
	return ${RT}
}

check_lib()
{
	local F=/tmp/$$.c

	echo "#define _GNU_SOURCE" >${F}
	echo 'main(){}' >>${F}
	echo -n "Checking for -l${1} ... "
	$(${CC} ${LDFLAGS} ${CPPFLAGS} ${CFLAGS} -l${1} ${F} \
		-o /dev/null 2>>config.log)
	local RT=$?
	ok ${RT}
	rm -f ${F}
	return ${RT}
}

ok()
{
	[[ $1 -eq 0 ]] && echo "ok" ||  echo "not found"
}

check_func()
{
	local F=/tmp/$$.c
	local FUNC="$(echo "${1}" | cut -d: -f1)"
	local ARGS="$(echo "${1}" | cut -d: -f2-)"

	echo "#define _GNU_SOURCE" >${F}
	for i in ${H_FILES} ; do
		echo "#include <${i}>" >>${F}
	done
	echo "void main() { ${FUNC}(${ARGS}); }" >>${F}
	echo -n "Checking for ${FUNC}() ... "
	$(${CC} ${LDFLAGS} ${CPPFLAGS} ${CFLAGS} ${F} -o /dev/null 2>>config.log)
	local RT=$?

	ok ${RT}
	rm -f ${F}
	return ${RT}
}

check_yacc()
{
	local F=$(mktemp); trap "{ rm -f \"${F}\"; }" EXIT

	echo -e '%%\nstart: ;\n%%\n' | \
		${YACC} ${YFLAGS} -o "${F}" -
	local RT=$?

	rm -f "${F}"
	return ${RT}
}

check_lex()
{
	local F=$(mktemp); trap "{ rm -f \"${F}\"; }" EXIT
	
	echo -e '%x TEMP\n%option stack bison-bridge reentrant\n%%\n. { ECHO; }\n%%\n' | \
		${LEX} ${LFLAGS} -o "${F}" -
	local RT=$?

	rm -f "${F}"
	return ${RT}
}

# Check for a c compiler (mandatory)

echo -n "Checking for a C compiler ... "
if [[ ! -x "$(which ${CC})" ]]; then
	fail "Error: CC not valid"
else
	export CC
	echo "$(which ${CC})" | tee -a config.log
fi

echo -n "Checking $(basename ${CC}) can produce executables ... "
echo -e '#include <stdlib.h>\nmain() {exit(0);}' | \
	${CC} -xc -o /dev/null - 2>>config.log && echo "ok" || fail "${CC} cannot produce executables"

HOST_MACHINE=$(${CC} -dumpmachine)

echo -n "Configuring ${PACKAGE} ${VERSION} on ${HOST_MACHINE}"
[[ -n "${TARGET}" ]] &&	echo " for target ${TARGET}" || echo ""

echo "objdir = ${OBJDIR}; srcdir = ${SRCDIR};"

# List of system headers we need to check for

H_FILES="signal.h stdlib.h sys/wait.h unistd.h err.h"

# List of system functions to check for function:arg0,arg1

FUNC_CHECK=""

# List of pkg-config things to check for

PKG_CHECK=""

# List of libraries to check for here

LIB_CHECK=""

# List of tools to check for here

TOOL_CHECK=""

# Application specific variables

# Check for pkg-config (mandatory)

echo -n "Checking for pkg-config ... "
if [[ ! -x "$(which ${PKG_CONFIG})" ]]; then
	fail "Error: PKG_CONFIG not valid"
fi

export PKG_CONFIG
echo "$(which ${PKG_CONFIG})"

# start a new configuration file
if [[ -e ${OBJDIR}/config.h ]]; then 
	mv -f ${OBJDIR}/config.h ${OBJDIR}/config.h~; 
fi
rm -f ${OBJDIR}/config.h

# kludge any defines here

# set-up defines
echo "#define VERSION \"${VERSION}\"" >> ${OBJDIR}/config.h

# package checks

for f in ${PKG_CHECK} ; do
	if check_pkg "${f}"; then
		CFLAGS="${CFLAGS} $(${PKG_CONFIG} --cflags "${f}")"
		LDFLAGS="${LDFLAGS} $(${PKG_CONFIG} --libs "${f}")"
	fi
done

# library checks

for f in ${LIB_CHECK} ; do
	if check_lib "${f}"; then LDFLAGS="${LDFLAGS} -l${f}" ; fi
done

# Perform checks for system headers and functions
# This is done here to ensure relevant libraries are linked etc.

for f in ${H_FILES} ; do
	def=$(echo ${f} | sed "s#/#_#;s#\.#_#;s#/#_#;" | tr "[a-z]" "[A-Z]")
    if check_header "${f}"; then 
		echo "#define HAVE_${def} 1" >> ${OBJDIR}/config.h
	fi
done

for f in ${FUNC_CHECK}; do
	def=$(echo ${f} | cut -d: -f1 | tr "[a-z]" "[A-Z]")
	if check_func "${f}"; then 
		echo "#define HAVE_${def} 1" >> ${OBJDIR}/config.h
	fi
done

for f in ${TOOL_CHECK}; do
	if ! which ${f} >/dev/null 2>&1; then
		fail "Error: ${f} not found"
	fi
done

if [[ "${YACC}" ]]; then
	echo -n "Checking $(basename ${YACC}) works ... "
	check_yacc 2>>config.log && echo "ok" || fail "provided YACC not functioning"
fi

if [[ "${LEX}" ]]; then
	echo -n "Checking $(basename ${LEX}) works ... "
	check_lex 2>>config.log && echo "ok" || fail "provided LEX not functioning"
fi

# Create Makefile from template

echo "Writing Makefile"

ARGS=$(cat <<- __END
	s#@@DEPS@@#${DEPS}#;
	s#@@BINDIR@@#${BINDIR}#;
	s#@@DOCDIR@@#${DOCDIR}#;
	s#@@CC@@#${CC}#;
	s#@@CFLAGS@@#${CFLAGS}#;
	s#@@CPPFLAGS@@#${CPPFLAGS}#;
	s#@@LFLAGS@@#${LFLAGS}#;
	s#@@YFLAGS@@#${YFLAGS}#;
	s#@@CXX@@#${CXX}#;
	s#@@DATADIR@@#${DATADIR}#;
	s#@@DATAROOTDIR@@#${DATAROOTDIR}#;
	s#@@EXECPREFIX@@#${EXECPREFIX}#;
	s#@@INFODIR@@#${INFODIR}#;
	s#@@LDFLAGS@@#${LDFLAGS}#;
	s#@@LIBDIR@@#${LIBDIR}#;
	s#@@LIBEXECDIR@@#${LIBEXECDIR}#;
	s#@@LOCALEDIR@@#${LOCALEDIR}#;
	s#@@LOCALSTATEDIR@@#${LOCALSTATEDIR}#;
	s#@@MANDIR@@#${MANDIR}#;
    s#@@PREFIX@@#${PREFIX}#;
	s#@@OBJDIR@@#${OBJDIR}#;
	s#@@SBINDIR@@#${SBINDIR}#;
	s#@@SHAREDSTATEDIR@@#${SHAREDSTATEDIR}#;
	s#@@SRCDIR@@#${SRCDIR}#;
	s#@@SYSCONFDIR@@#${SYSCONFDIR}#;
	s#@@YACC@@#${YACC}#;
	s#@@LEX@@#${LEX}#;
__END
)

cat ${SRCDIR}/Makefile.in | sed "${ARGS}" > ${OBJDIR}/Makefile

echo "Creating config.status"

cat > "config.status" <<- __END
	#!/usr/bin/env sh

	# Created via:
	# $0 ${SAVED_ARGS}

	set -o errexit
	set -o pipefail
	set -o nounset

	$0 ${SAVED_ARGS}
__END
chmod +x config.status

echo "Please type make to continue"

wait
